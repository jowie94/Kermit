grammar Kermit;

options {
	language=CSharp3;
	TokenLabelType=CommonToken;
	output=AST;
	ASTLabelType=KermitAST;
}

tokens {
	BLOCK; ARGS; CALL;
	FUNC='function'; RETURN='return'; IF='if'; WHILE='while'; // Keywords
	EQ='=='; LT='<'; BT='>'; // Logical (TODO: Add more logical tokens)
	NUM; ASSIGN='='; ADD='+'; SUB='-'; MUL='*'; DIV='/'; // Arithmetics
}

@lexer::namespace{Parser}
@parser::namespace{Parser}

@members {
	IScope currentScope;
	public KermitParser(ITokenStream input, IScope globalScope) : this(input)
	{
		currentScope = globalScope;
	}
}

/*
 * Parser Rules
 */

public
program
	: (functionDefinition|statementOrNL)+ EOF
	  -> ^(BLOCK statementOrNL*)
	;

functionDefinition
	: 'function' ID
	 {
		FunctionSymbol fs = new FunctionSymbol($ID.text, currentScope);
		currentScope.Define(fs);
		currentScope = fs;
	 }
	 '(' (vardef (',' vardef)* )? ')'
	 {currentScope = new LocalScope(fs);}
	 multipleStatements
	 {
		fs.BlockAST = $multipleStatements.tree;
		currentScope = currentScope.EnclosingScope;
		currentScope = currentScope.EnclosingScope;
	 }
	 ->
	;

vardef
	: ID
	 {
		$ID.tree.Scope = currentScope;
		VariableSymbol vs = new VariableSymbol($ID.text);
		currentScope.Define(vs);
	 }
	;

soms // Single or multiple statements
	: NL* statement	-> ^(BLOCK statement)
	| multipleStatements
	;

multipleStatements
	: NL* '{' statementOrNL* '}' NL	-> ^(BLOCK statementOrNL*)
	;

statementOrNL // Extended statements (include newline)
	: statement
	| NL		->
	;

statement // Normal statements
	: qid '=' expr NL		-> ^('=' qid expr)
	| 'return' expr NL		-> ^('return' expr)
	| 'if' expr c=soms ('else' el=soms)?	-> ^('if' expr $c $el?)
	| 'while' expr soms		-> ^('while' expr soms)
	| call NL				-> call
	;

call
@after {
	$call.tree.Scope = currentScope;
}
	: name=ID '(' (expr (',' expr)*)? ')' -> ^(CALL ID expr*) ;

expr: addexpr (('=='|'<'|'>')^ addexpr)? ;

addexpr
	: mulexpr (('+'|'-')^ mulexpr)*
	;

mulexpr
	: atom (('*'|'/')^ atom)*
	;

atom
	: '-'? n=(INT|FLOAT) -> ^(NUM $n '-'?)
	| CHAR
	| STRING
	| qid
	| call
	| '(' expr ')' -> expr
	;

qid : ID; // Can't be resolved until runtime


/*
 * Lexer Rules
 */

WS	:   (' '|'\t') {$channel=Hidden;};

NL	:	'\r'? '\n' ;

ID  :   LETTER (LETTER | '0'..'9')*  ;

fragment
LETTER
	:   ('a'..'z' | 'A'..'Z')
	;

CHAR:	'\'' . '\'' ;

STRING:	'\"' .* '\"' ;

INT :   '0'..'9'+ ;

FLOAT
	:	INT '.' INT*
	|	'.' INT+
	;

SL_COMMENT
	:   '//' ~('\r'|'\n')* {$channel=Hidden;}
	|	'/*' ('\w'|'\W')* '*/' {$channel=Hidden;}
	;
